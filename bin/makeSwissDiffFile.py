#!/usr/local/bin/python
#
#  makeSwissDiffFile.py
###########################################################################
#
#  Purpose:
#
#      This script will create an output file that contains all of the
#      MGI/SwissDiff associations in the database.
#
#  Usage:
#
#      makeSwissDiffFile.py
#
#  Env Vars:
#
#      The following environment variables are set by the configuration
#      file that is sourced by the wrapper script:
#
#	   MGI_UNIPROT_LOAD_FILE
#          MGI_SWISSPROT_LOAD_FILE
#
#  Inputs:
#
#      - MGI/UniProt load file ($MGI_UNIPROT_LOAD_FILE)
#        List of MGI/UniProt associations generated by the most recent bucketization.
#        It has the following tab-delimited fields:
#
#        1) MGI ID (for a marker)
#        2) Swiss-Prot ID
#        3) TrEMBL ID
#        4) EC IDs (comma-separated)
#        5) PDB IDs (comma-separated)
#
#  Outputs:
#
#      - MGI/SwissProt association file from the database with
#        the following tab-delimited fields:
#
#        1) MGI ID (for a marker)
#        2) SwissProt ID
#        3) TrEMBL ID
#
#      - MGI/SwissProt vs. MGI/UniProt buckets
#        Each file name is prefixed as follows:
#
#        ${BUCKET_PREFIX}.0_1.txt
#        ${BUCKET_PREFIX}.1_0.txt
#        ${BUCKET_PREFIX}.1_1.txt
#        ${BUCKET_PREFIX}.1_n.txt
#        ${BUCKET_PREFIX}.n_1.txt
#        ${BUCKET_PREFIX}.n_n.txt
#
#  Exit Codes:
#
#      0:  Successful completion
#      1:  An exception occurred
#
#  Assumes:  Nothing
#
#  Implementation:
#
#      This script will perform following steps:
#
#      1) Initialize variables.
#      2) Open files.
#      3) Create a file of MGI/SwissProt associations in the database	
#      4) Create a file of MGI/SwissProt vs. MGI/UniProt buckets
#      5) Close files.
#
#  Notes:  None
#
###########################################################################

import sys 
import os
import string
import db
import tabledatasetlib

FIELDS = [ 'MGI ID', 'SWISS-PROT', 'TrEMBL' ]

DEFAULT_BUCKETDIR = os.getcwd()
DEFAULT_BUCKET_PREFIX = 'bucket'

B0_1 = '0_1'
B1_0 = '1_0'
B1_1 = '1_1'
B1_N = '1_N'
BN_1 = 'N_1'
BN_N = 'N_N'

BUCKETLIST = [ B0_1, B1_0, B1_1, B1_N, BN_1, BN_N ]

bucket = {}
bucketizer = None

#
# Purpose: Initialization
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def initialize():
    global fpAssoc
    global newAssocFile, oldAssocFile
    global bucketDir, bucketPrefix
    global bucket

    oldAssocFile = os.getenv('MGI_SWISSPROT_LOAD_FILE')
    newAssocFile = os.getenv('MGI_UNIPROT_LOAD_FILE')
    bucketDir = os.getenv('BUCKETDIR')
    bucketPrefix = 'mgi_swissprot'

    rc = 0

    #
    # Make sure the required environment variables are set.
    #
    if not oldAssocFile:
        print 'Environment variable not set: MGI_SWISSPROT_LOAD_FILE'
        rc = 1

    #
    # Make sure the required environment variables are set.
    #
    if not newAssocFile:
        print 'Environment variable not set: MGI_UNIPROT_LOAD_FILE'
        rc = 1

    #
    # Use defaults for optional environment variables that are not set.
    #
    if not bucketDir:
        bucketDir = DEFAULT_BUCKETDIR
    if not bucketPrefix:
        bucketPrefix = DEFAULT_BUCKET_PREFIX

    #
    # Initialize file pointers.
    #
    for i in BUCKETLIST:
        bucket[i] = None

    #
    # Initialize file pointers.
    #
    fpAssoc = None

    return rc


#
# Purpose: Open files.
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def openFiles():
    global fpAssoc

    #
    # Open the report files.
    #
    try:
        fpAssoc = open(oldAssocFile, 'w')
    except:
        print 'Cannot open report: ' + oldAssocFile
        return 1

    for i in BUCKETLIST:
        file = bucketDir + '/' + bucketPrefix + '.' + i + '.txt'
        try:
            bucket[i] = open(file, 'w')
        except:
            print 'Cannot open bucket: ' + file
            return 1

    return 0


#
# Purpose: Close files.
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def closeFiles():
    for i in BUCKETLIST:
        if bucket[i]:
            bucket[i].close()

    return 0


#
# Purpose: Create a file of the MGI/SwissProt associations in the database
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def getAssociations():
    #
    # Get all the MGI/SwissProt association 
    #
    results = db.sql('''
		     select a1.accID "mgiID", a2.accID "uniprotID", a2._LogicalDB_key
                     from ACC_Accession a1, ACC_Accession a2 
                     where a1._MGIType_key = 2
                           and a1._LogicalDB_key = 1 
                           and a1.prefixPart = "MGI:" 
                           and a1.preferred = 1 
                           and a1._Object_key = a2._Object_key 
                           and a2._MGIType_key = 2 
                           and a2._LogicalDB_key in (13,41) 
                           and a2._CreatedBy_key = 1442 
                     order by a1.accID, a1._LogicalDB_key, a2.accID
		     ''', 'auto')

    #
    # Write the MGI/SwissProt associations to the file.
    #

    mgiList = []
    spList = {}
    trList = {}

    for r in results:

        mgiID = r['mgiID']
        uniprotID = r['uniprotID']
	ldb = r['_LogicalDB_key']

	if mgiID not in mgiList:
	    mgiList.append(mgiID)

	if ldb == 13:
	    if not spList.has_key(mgiID):
	        spList[mgiID] = []
            spList[mgiID].append(uniprotID)

	if ldb == 41:
	    if not trList.has_key(mgiID):
	        trList[mgiID] = []
            trList[mgiID].append(uniprotID)

    for mgiID in mgiList:
        fpAssoc.write(mgiID + '\t')

	if spList.has_key(mgiID):
	    fpAssoc.write(string.join(spList[mgiID], ','))
        fpAssoc.write('\t')

	if trList.has_key(mgiID):
	    fpAssoc.write(string.join(trList[mgiID], ','))
        fpAssoc.write('\n')

    if fpAssoc:
        fpAssoc.close()

    return 0

#
# Purpose: Bucketize the files.
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def bucketize():
    global dsNew, dsOld, bucketizer

    #
    # Create a TableDataSet for the new association file.
    #
    multiFields = { 'SWISS-PROT' : ',' , 'TrEMBL' : ',' }

    dsNew = tabledatasetlib.TextFileTableDataSet(
                'new',
                newAssocFile,
                fieldnames=FIELDS,
		multiValued=multiFields,
                readNow=1,
		numheaderlines=1)

    dsNew.addIndexes( [ 'SWISS-PROT',  'TrEMBL' ] )

    #
    # Create a TableDataSet for the old association file.
    #
    dsOld = tabledatasetlib.TextFileTableDataSet(
                'old',
                oldAssocFile,
                fieldnames=FIELDS,
		multiValued=multiFields,
                readNow=1)

    dsOld.addIndexes( [ 'SWISS-PROT',  'TrEMBL' ] )

    #
    # Create a bucketizer for the two datasets and run it.
    #
    bucketizer = tabledatasetlib.TableDataSetBucketizer(
                     dsNew,
                     [ 'SWISS-PROT', 'TrEMBL' ],
                     dsOld,
                     [ 'SWISS-PROT', 'TrEMBL' ])
    bucketizer.run()

    print 'MGI/UniProt Associations (New Bucketization vs SwissProt Load)'

    print '0:1 Bucket: ' + str(len(bucketizer.get0_1()))
    print '1:0 Bucket: ' + str(len(bucketizer.get1_0()))
    print '1:1 Bucket: ' + str(len(bucketizer.get1_1()))

    count = 0
    for (newKey, oldKeys) in bucketizer.get1_n():
        count += len(oldKeys)
    print '1:N Bucket: ' + str(count)

    count = 0
    for (newKeys, oldKey) in bucketizer.getn_1():
        count += len(newKeys)
    print 'N:1 Bucket: ' + str(count)

    return 0


#
# Purpose: Write the bucketizing results to the bucket files.
# Returns: 1 if file does not exist or is not readable, else 0
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def writeBuckets():

    reporter = tabledatasetlib.TableDataSetBucketizerReporter(bucketizer)

    reporter.write_0_1(bucket[B0_1], FIELDS)
    reporter.write_1_0(bucket[B1_0], FIELDS)
    reporter.write_1_1(bucket[B1_1], FIELDS, FIELDS)
    reporter.write_1_n(bucket[B1_N], FIELDS, FIELDS)
    reporter.write_n_1(bucket[BN_1], FIELDS, FIELDS)
    reporter.write_n_m(bucket[BN_N], FIELDS, FIELDS)

    return 0


#
#  MAIN
#

if initialize() != 0:
    sys.exit(1)

if openFiles() != 0:
    sys.exit(1)

if getAssociations() != 0:
    closeFiles()
    sys.exit(1)

if bucketize() != 0:
    closeFiles()
    sys.exit(1)

if writeBuckets() != 0:
    closeFiles()
    sys.exit(1)

closeFiles()
sys.exit(0)

